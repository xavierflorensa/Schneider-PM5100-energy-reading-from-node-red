[{"id":"a9d9fb95.5b1498","type":"modbus-read","z":"8f127c7f.87577","name":"","topic":"","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"unitid":"","dataType":"HoldingRegister","adr":"2999","quantity":"2","rate":"4","rateUnit":"s","delayOnStart":false,"startDelayTime":"","server":null,"useIOFile":false,"ioFile":"","useIOForPayload":false,"x":141.5,"y":193,"wires":[["644b8c44.52dc74","8b9b6a28.b13c88","913ca64b.b54348"],[]]},{"id":"644b8c44.52dc74","type":"modbus-response","z":"8f127c7f.87577","name":"","registerShowMax":20,"x":362.5,"y":133,"wires":[]},{"id":"8b9b6a28.b13c88","type":"debug","z":"8f127c7f.87577","name":"Current Phase A","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":353.5,"y":196,"wires":[]},{"id":"879b9471.16ae78","type":"modbus-read","z":"8f127c7f.87577","name":"","topic":"","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"unitid":"","dataType":"HoldingRegister","adr":"3027","quantity":"2","rate":"4","rateUnit":"s","delayOnStart":false,"startDelayTime":"","server":null,"useIOFile":false,"ioFile":"","useIOForPayload":false,"x":156,"y":356,"wires":[["e7a4a5fd.635628","ac396798.6092f8","7607acc0.8944e4"],[]]},{"id":"e7a4a5fd.635628","type":"modbus-response","z":"8f127c7f.87577","name":"","registerShowMax":20,"x":373,"y":319,"wires":[]},{"id":"ac396798.6092f8","type":"debug","z":"8f127c7f.87577","name":"Voltage Phase A","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":364,"y":376,"wires":[]},{"id":"b7bebb7b.2b8e58","type":"modbus-read","z":"8f127c7f.87577","name":"","topic":"","showStatusActivities":false,"logIOActivities":false,"showErrors":false,"unitid":"","dataType":"HoldingRegister","adr":"3059","quantity":"2","rate":"4","rateUnit":"s","delayOnStart":false,"startDelayTime":"","server":null,"useIOFile":false,"ioFile":"","useIOForPayload":false,"x":148,"y":534,"wires":[["b3f76cb4.813f2","1691b426.9a320c","bb9632ba.d0c4b"],[]]},{"id":"b3f76cb4.813f2","type":"modbus-response","z":"8f127c7f.87577","name":"","registerShowMax":20,"x":369,"y":474,"wires":[]},{"id":"1691b426.9a320c","type":"debug","z":"8f127c7f.87577","name":"Active Power III","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":360,"y":537,"wires":[]},{"id":"9d3b72f3.68373","type":"join","z":"8f127c7f.87577","name":"join to array","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":534.5,"y":635,"wires":[["a07a329d.6c2b5"]]},{"id":"16322f96.2ffcc","type":"change","z":"8f127c7f.87577","name":"set topic 1","rules":[{"t":"set","p":"topic","pt":"msg","to":"a","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":340.5,"y":637,"wires":[["9d3b72f3.68373"]]},{"id":"ff918ae9.319288","type":"change","z":"8f127c7f.87577","name":"set topic 2","rules":[{"t":"set","p":"topic","pt":"msg","to":"b","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":340.5,"y":682,"wires":[["9d3b72f3.68373"]]},{"id":"789c4123.06852","type":"inject","z":"8f127c7f.87577","name":"","topic":"","payload":"17258","payloadType":"num","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":164.5,"y":637,"wires":[["16322f96.2ffcc"]]},{"id":"96605623.455c88","type":"inject","z":"8f127c7f.87577","name":"","topic":"","payload":"46359","payloadType":"num","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":159.5,"y":682,"wires":[["ff918ae9.319288"]]},{"id":"a07a329d.6c2b5","type":"function","z":"8f127c7f.87577","name":"array","func":"a = msg.payload.a\nb = msg.payload.b\n\n\nvar list = [a,b]\nvar msg1 = {payload:list}\nreturn msg1;","outputs":1,"noerr":0,"x":714.5,"y":633,"wires":[["2996faad.f1a936","58745f17.301"]]},{"id":"8ba933f8.9a296","type":"comment","z":"8f127c7f.87577","name":"Voltage L1","info":"","x":97,"y":594,"wires":[]},{"id":"2996faad.f1a936","type":"debug","z":"8f127c7f.87577","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":921.5,"y":611,"wires":[]},{"id":"58745f17.301","type":"function","z":"8f127c7f.87577","name":"convert array 2 int to 32bit int","func":"let pay = msg.payload;\n\nconst buf = Buffer.allocUnsafe(4);\nbuf.writeUInt16BE(pay[0],0);\nbuf.writeUInt16BE(pay[1],2);\n\nmsg.payload = buf;\nreturn msg;","outputs":1,"noerr":0,"x":657,"y":710,"wires":[["f6358027.0730a"]]},{"id":"f6358027.0730a","type":"function","z":"8f127c7f.87577","name":"IEEE-754 to float","func":"/* Converts from an number, string, buffer or array representing an IEEE-754 value to a javascript float.\n * The following may be given in msg.payload: A string representing a number, which may be hex or binary\n *  examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011  An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = Int2Float32(intValue);\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n    return sign * significand * Math.pow(2, exponent);\n}","outputs":1,"noerr":0,"x":917,"y":710,"wires":[["3c823f46.615cc"]]},{"id":"3c823f46.615cc","type":"debug","z":"8f127c7f.87577","name":"Value","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":1102,"y":709,"wires":[]},{"id":"913ca64b.b54348","type":"function","z":"8f127c7f.87577","name":"convert array 2 int to 32bit int","func":"let pay = msg.payload;\n\nconst buf = Buffer.allocUnsafe(4);\nbuf.writeUInt16BE(pay[0],0);\nbuf.writeUInt16BE(pay[1],2);\n\nmsg.payload = buf;\nreturn msg;","outputs":1,"noerr":0,"x":407,"y":83,"wires":[["d80dbb20.eeecd8"]]},{"id":"d80dbb20.eeecd8","type":"function","z":"8f127c7f.87577","name":"IEEE-754 to float","func":"/* Converts from an number, string, buffer or array representing an IEEE-754 value\n * to a javascript float.\n * The following may be given in msg.payload:\n *      A string representing a number, which may be hex or binary\n *        examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011\n *      An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = Int2Float32(intValue);\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}","outputs":1,"noerr":0,"x":667,"y":84,"wires":[["e194bd51.69746"]]},{"id":"e194bd51.69746","type":"debug","z":"8f127c7f.87577","name":"Value","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":856,"y":84,"wires":[]},{"id":"7607acc0.8944e4","type":"function","z":"8f127c7f.87577","name":"convert array 2 int to 32bit int","func":"let pay = msg.payload;\n\nconst buf = Buffer.allocUnsafe(4);\nbuf.writeUInt16BE(pay[0],0);\nbuf.writeUInt16BE(pay[1],2);\n\nmsg.payload = buf;\nreturn msg;","outputs":1,"noerr":0,"x":393,"y":266,"wires":[["661565ae.cc1ecc"]]},{"id":"661565ae.cc1ecc","type":"function","z":"8f127c7f.87577","name":"IEEE-754 to float","func":"/* Converts from an number, string, buffer or array representing an IEEE-754 value\n * to a javascript float.\n * The following may be given in msg.payload:\n *      A string representing a number, which may be hex or binary\n *        examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011\n *      An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = Int2Float32(intValue);\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}","outputs":1,"noerr":0,"x":653,"y":267,"wires":[["c43ed1a8.93e28"]]},{"id":"c43ed1a8.93e28","type":"debug","z":"8f127c7f.87577","name":"Value","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":842,"y":267,"wires":[]},{"id":"bb9632ba.d0c4b","type":"function","z":"8f127c7f.87577","name":"convert array 2 int to 32bit int","func":"let pay = msg.payload;\n\nconst buf = Buffer.allocUnsafe(4);\nbuf.writeUInt16BE(pay[0],0);\nbuf.writeUInt16BE(pay[1],2);\n\nmsg.payload = buf;\nreturn msg;","outputs":1,"noerr":0,"x":379,"y":426,"wires":[["be34ba4e.dabe08"]]},{"id":"be34ba4e.dabe08","type":"function","z":"8f127c7f.87577","name":"IEEE-754 to float","func":"/* Converts from an number, string, buffer or array representing an IEEE-754 value\n * to a javascript float.\n * The following may be given in msg.payload:\n *      A string representing a number, which may be hex or binary\n *        examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011\n *      An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = Int2Float32(intValue);\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}","outputs":1,"noerr":0,"x":639,"y":427,"wires":[["f5cd4be0.e9b688"]]},{"id":"f5cd4be0.e9b688","type":"debug","z":"8f127c7f.87577","name":"Value","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":828,"y":427,"wires":[]},{"id":"f1bcf294.279be","type":"join","z":"8f127c7f.87577","name":"join to array","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":534,"y":818,"wires":[["35022b60.055e34"]]},{"id":"4a384768.e4dda8","type":"change","z":"8f127c7f.87577","name":"set topic 1","rules":[{"t":"set","p":"topic","pt":"msg","to":"a","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":340,"y":820,"wires":[["f1bcf294.279be"]]},{"id":"b034d62.0447428","type":"change","z":"8f127c7f.87577","name":"set topic 2","rules":[{"t":"set","p":"topic","pt":"msg","to":"b","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":340,"y":865,"wires":[["f1bcf294.279be"]]},{"id":"caa8c917.5d1e38","type":"inject","z":"8f127c7f.87577","name":"","topic":"","payload":"17063","payloadType":"num","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":164,"y":820,"wires":[["4a384768.e4dda8"]]},{"id":"50379f23.e8bfc","type":"inject","z":"8f127c7f.87577","name":"","topic":"","payload":"647","payloadType":"num","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":159,"y":865,"wires":[["b034d62.0447428"]]},{"id":"35022b60.055e34","type":"function","z":"8f127c7f.87577","name":"array","func":"a = msg.payload.a\nb = msg.payload.b\n\n\nvar list = [a,b]\nvar msg1 = {payload:list}\nreturn msg1;","outputs":1,"noerr":0,"x":714,"y":816,"wires":[["772d2ead.6d224","d83f6176.c659d"]]},{"id":"145d32e3.bd0add","type":"comment","z":"8f127c7f.87577","name":"Current L1","info":"","x":96.5,"y":777,"wires":[]},{"id":"772d2ead.6d224","type":"debug","z":"8f127c7f.87577","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":921,"y":794,"wires":[]},{"id":"d83f6176.c659d","type":"function","z":"8f127c7f.87577","name":"convert array 2 int to 32bit int","func":"let pay = msg.payload;\n\nconst buf = Buffer.allocUnsafe(4);\nbuf.writeUInt16BE(pay[0],0);\nbuf.writeUInt16BE(pay[1],2);\n\nmsg.payload = buf;\nreturn msg;","outputs":1,"noerr":0,"x":656.5,"y":893,"wires":[["b6958633.58a718"]]},{"id":"b6958633.58a718","type":"function","z":"8f127c7f.87577","name":"IEEE-754 to float","func":"/* Converts from an number, string, buffer or array representing an IEEE-754 value to a javascript float.\n * The following may be given in msg.payload: A string representing a number, which may be hex or binary\n *  examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011  An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = Int2Float32(intValue);\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n    return sign * significand * Math.pow(2, exponent);\n}","outputs":1,"noerr":0,"x":916.5,"y":893,"wires":[["dd2f3d67.2eab7"]]},{"id":"dd2f3d67.2eab7","type":"debug","z":"8f127c7f.87577","name":"Value","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":1101.5,"y":892,"wires":[]},{"id":"aa64c9bd.6b0c48","type":"join","z":"8f127c7f.87577","name":"join to array","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":536,"y":982,"wires":[["56cd8c5f.c662e4"]]},{"id":"ce5f127.7616ff","type":"change","z":"8f127c7f.87577","name":"set topic 1","rules":[{"t":"set","p":"topic","pt":"msg","to":"a","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":342,"y":984,"wires":[["aa64c9bd.6b0c48"]]},{"id":"2183a50e.e419fa","type":"change","z":"8f127c7f.87577","name":"set topic 2","rules":[{"t":"set","p":"topic","pt":"msg","to":"b","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":342,"y":1029,"wires":[["aa64c9bd.6b0c48"]]},{"id":"1a1ca26f.dba54e","type":"inject","z":"8f127c7f.87577","name":"","topic":"","payload":"16973","payloadType":"num","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":166,"y":984,"wires":[["ce5f127.7616ff"]]},{"id":"635f8ab2.1dc0a4","type":"inject","z":"8f127c7f.87577","name":"","topic":"","payload":"63527","payloadType":"num","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":161,"y":1029,"wires":[["2183a50e.e419fa"]]},{"id":"56cd8c5f.c662e4","type":"function","z":"8f127c7f.87577","name":"array","func":"a = msg.payload.a\nb = msg.payload.b\n\n\nvar list = [a,b]\nvar msg1 = {payload:list}\nreturn msg1;","outputs":1,"noerr":0,"x":716,"y":980,"wires":[["d91fb664.7ead78","7e6f0435.93e2fc"]]},{"id":"bdf9a911.197098","type":"comment","z":"8f127c7f.87577","name":"Power III","info":"","x":98.5,"y":941,"wires":[]},{"id":"d91fb664.7ead78","type":"debug","z":"8f127c7f.87577","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":923,"y":958,"wires":[]},{"id":"7e6f0435.93e2fc","type":"function","z":"8f127c7f.87577","name":"convert array 2 int to 32bit int","func":"let pay = msg.payload;\n\nconst buf = Buffer.allocUnsafe(4);\nbuf.writeUInt16BE(pay[0],0);\nbuf.writeUInt16BE(pay[1],2);\n\nmsg.payload = buf;\nreturn msg;","outputs":1,"noerr":0,"x":658.5,"y":1057,"wires":[["7a63342.a5ff2cc"]]},{"id":"7a63342.a5ff2cc","type":"function","z":"8f127c7f.87577","name":"IEEE-754 to float","func":"/* Converts from an number, string, buffer or array representing an IEEE-754 value to a javascript float.\n * The following may be given in msg.payload: A string representing a number, which may be hex or binary\n *  examples, \"1735\"  \"0x02045789\"  0b01000000010010010000111111011011  An integer value\n *      A four element array or buffer of 8 bit values, most significant byte first.\n*/ \n// first make a number from the given payload if necessary\nlet intValue;\nif (typeof msg.payload === \"number\") {\n    intValue = msg.payload;\n} else if (typeof msg.payload === \"string\") {\n    intValue = Number(msg.payload);\n} else if (msg.payload.length == 4) {\n    // four byte array or buffer\n    intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n} else {\n    node.warn(\"Unrecognised payload type or length\");\n}\n\nmsg.payload = Int2Float32(intValue);\nreturn msg;\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n    return sign * significand * Math.pow(2, exponent);\n}","outputs":1,"noerr":0,"x":918.5,"y":1057,"wires":[["66ac123f.63873c"]]},{"id":"66ac123f.63873c","type":"debug","z":"8f127c7f.87577","name":"Value","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":1103.5,"y":1056,"wires":[]}]